/*
 * generated by Xtext 2.27.0
 */
grammar InternalRobot;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.tue.dsldesign.robot.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.tue.dsldesign.robot.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.tue.dsldesign.robot.services.RobotGrammarAccess;

}
@parser::members {
	private RobotGrammarAccess grammarAccess;

	public void setGrammarAccess(RobotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRobot
entryRuleRobot
:
{ before(grammarAccess.getRobotRule()); }
	 ruleRobot
{ after(grammarAccess.getRobotRule()); } 
	 EOF 
;

// Rule Robot
ruleRobot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRobotAccess().getGroup()); }
		(rule__Robot__Group__0)
		{ after(grammarAccess.getRobotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStep
entryRuleStep
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepAccess().getGroup()); }
		(rule__Step__Group__0)
		{ after(grammarAccess.getStepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitial
entryRuleInitial
:
{ before(grammarAccess.getInitialRule()); }
	 ruleInitial
{ after(grammarAccess.getInitialRule()); } 
	 EOF 
;

// Rule Initial
ruleInitial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitialAccess().getGroup()); }
		(rule__Initial__Group__0)
		{ after(grammarAccess.getInitialAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Direction
ruleDirection
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
		(rule__Direction__Alternatives)
		{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectionAccess().getUpEnumLiteralDeclaration_0()); }
		('up')
		{ after(grammarAccess.getDirectionAccess().getUpEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getDownEnumLiteralDeclaration_1()); }
		('down')
		{ after(grammarAccess.getDirectionAccess().getDownEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_2()); }
		('left')
		{ after(grammarAccess.getDirectionAccess().getLeftEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_3()); }
		('right')
		{ after(grammarAccess.getDirectionAccess().getRightEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRobotsAssignment_1()); }
	(rule__Model__RobotsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getRobotsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Robot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__0__Impl
	rule__Robot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getRobotAction_0()); }
	()
	{ after(grammarAccess.getRobotAccess().getRobotAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__1__Impl
	rule__Robot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getBeginKeyword_1()); }
	'begin'
	{ after(grammarAccess.getRobotAccess().getBeginKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__2__Impl
	rule__Robot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getInitialAssignment_2()); }
	(rule__Robot__InitialAssignment_2)?
	{ after(grammarAccess.getRobotAccess().getInitialAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__3__Impl
	rule__Robot__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getGroup_3()); }
	(rule__Robot__Group_3__0)?
	{ after(grammarAccess.getRobotAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getRobotAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Robot__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group_3__0__Impl
	rule__Robot__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getStepsAssignment_3_0()); }
	(rule__Robot__StepsAssignment_3_0)
	{ after(grammarAccess.getRobotAccess().getStepsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getStepsAssignment_3_1()); }
	(rule__Robot__StepsAssignment_3_1)*
	{ after(grammarAccess.getRobotAccess().getStepsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getStepAction_0()); }
	()
	{ after(grammarAccess.getStepAccess().getStepAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__1__Impl
	rule__Step__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getDirectionAssignment_1()); }
	(rule__Step__DirectionAssignment_1)
	{ after(grammarAccess.getStepAccess().getDirectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getDistanceAssignment_2()); }
	(rule__Step__DistanceAssignment_2)?
	{ after(grammarAccess.getStepAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Initial__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Initial__Group__0__Impl
	rule__Initial__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialAccess().getInitialAction_0()); }
	()
	{ after(grammarAccess.getInitialAccess().getInitialAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Initial__Group__1__Impl
	rule__Initial__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialAccess().getInitialKeyword_1()); }
	'initial'
	{ after(grammarAccess.getInitialAccess().getInitialKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Initial__Group__2__Impl
	rule__Initial__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialAccess().getXPosAssignment_2()); }
	(rule__Initial__XPosAssignment_2)
	{ after(grammarAccess.getInitialAccess().getXPosAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Initial__Group__3__Impl
	rule__Initial__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getInitialAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Initial__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialAccess().getYPosAssignment_4()); }
	(rule__Initial__YPosAssignment_4)
	{ after(grammarAccess.getInitialAccess().getYPosAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__RobotsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRobotsRobotParserRuleCall_1_0()); }
		ruleRobot
		{ after(grammarAccess.getModelAccess().getRobotsRobotParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__InitialAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getInitialInitialParserRuleCall_2_0()); }
		ruleInitial
		{ after(grammarAccess.getRobotAccess().getInitialInitialParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__StepsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getStepsStepParserRuleCall_3_0_0()); }
		ruleStep
		{ after(grammarAccess.getRobotAccess().getStepsStepParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__StepsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getStepsStepParserRuleCall_3_1_0()); }
		ruleStep
		{ after(grammarAccess.getRobotAccess().getStepsStepParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__DirectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getDirectionDirectionEnumRuleCall_1_0()); }
		ruleDirection
		{ after(grammarAccess.getStepAccess().getDirectionDirectionEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getDistanceEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getStepAccess().getDistanceEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__XPosAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialAccess().getXPosEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getInitialAccess().getXPosEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Initial__YPosAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialAccess().getYPosEIntParserRuleCall_4_0()); }
		ruleEInt
		{ after(grammarAccess.getInitialAccess().getYPosEIntParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
