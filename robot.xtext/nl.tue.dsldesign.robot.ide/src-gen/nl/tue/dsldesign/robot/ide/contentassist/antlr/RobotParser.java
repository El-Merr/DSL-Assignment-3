/*
 * generated by Xtext 2.27.0
 */
package nl.tue.dsldesign.robot.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import nl.tue.dsldesign.robot.ide.contentassist.antlr.internal.InternalRobotParser;
import nl.tue.dsldesign.robot.services.RobotGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RobotParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RobotGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RobotGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
			builder.put(grammarAccess.getRobotAccess().getGroup_3(), "rule__Robot__Group_3__0");
			builder.put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
			builder.put(grammarAccess.getInitialAccess().getGroup(), "rule__Initial__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getModelAccess().getRobotsAssignment_1(), "rule__Model__RobotsAssignment_1");
			builder.put(grammarAccess.getRobotAccess().getInitialAssignment_2(), "rule__Robot__InitialAssignment_2");
			builder.put(grammarAccess.getRobotAccess().getStepsAssignment_3_0(), "rule__Robot__StepsAssignment_3_0");
			builder.put(grammarAccess.getRobotAccess().getStepsAssignment_3_1(), "rule__Robot__StepsAssignment_3_1");
			builder.put(grammarAccess.getStepAccess().getDirectionAssignment_1(), "rule__Step__DirectionAssignment_1");
			builder.put(grammarAccess.getStepAccess().getDistanceAssignment_2(), "rule__Step__DistanceAssignment_2");
			builder.put(grammarAccess.getInitialAccess().getXPosAssignment_2(), "rule__Initial__XPosAssignment_2");
			builder.put(grammarAccess.getInitialAccess().getYPosAssignment_4(), "rule__Initial__YPosAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RobotGrammarAccess grammarAccess;

	@Override
	protected InternalRobotParser createParser() {
		InternalRobotParser result = new InternalRobotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RobotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RobotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
