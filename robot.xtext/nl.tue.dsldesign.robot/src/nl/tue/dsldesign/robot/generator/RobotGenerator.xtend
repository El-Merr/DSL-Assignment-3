/*
 * generated by Xtext 2.27.0
 */
package nl.tue.dsldesign.robot.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import nl.tue.dsldesign.robot.metamodel.Robot
import nl.tue.dsldesign.robot.metamodel.Step
import nl.tue.dsldesign.robot.metamodel.Initial

//import org.eclipse.emf.ecore.util.EcoreUtil
//import org.eclipse.emf.common.util.URI

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RobotGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var file = resource.getURI().toString().split('/')
		var filename = file.get(file.size -1)
		
		fsa.generateFile(filename + '.xml','''
			<?xml version="1.0" encoding="UTF-8"?>
            «FOR robot : resource.allContents.filter(Robot).toIterable»
            	<Robot>
                	«IF robot.initial !== null»
                		«compileInit(robot.initial)»
                	«ENDIF»
                	«compileSteps(robot.steps)»
                </Robot>
            «ENDFOR»
        '''
		)
	}
	
	def compileInit(Initial init) {
		'''
		<Initial x=«init.XPos» y=«init.YPos»>
		'''
	}
	
	def compileSteps(Step[] steps) {
		'''
		«FOR step : steps»
			<Step dir=«step.direction» dist=«step.distance»>
        «ENDFOR»
		'''
	}


}
