/*
 * generated by Xtext 2.27.0
 */
package nl.tue.dsldesign.robot.validation;

import org.eclipse.xtext.validation.Check;

import nl.tue.dsldesign.robot.metamodel.Robot;
import nl.tue.dsldesign.robot.metamodel.Step;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class RobotValidator extends AbstractRobotValidator {
	
	int MAX_STEP_DISTANCE = 100;
	
	@Check
	public void checkStepsPositiveInt(Robot r) {
		for (Step s : r.getSteps()) {
			if (s.getDistance() < 0) {
				error("Steps cannot be negative", s, null);
			}
		}
	}
	
	@Check
	public void checkNoSequentialDirections(Robot r) {
		String prevDirection = "";
		for (Step s : r.getSteps()) {
			if (s.getDirection().toString().equals(prevDirection)) {
				error("Two squential steps cannot have the same direction. \n "
						+ "Combine the step's distance instead", s, null);
			}
			prevDirection = s.getDirection().toString();
		}
	}
	
	@Check
	public void checkMaxStepSize(Robot r) {
		
		for (Step s : r.getSteps()) {
			if (s.getDistance() > MAX_STEP_DISTANCE) {
				error("The maximum distance per step is 100", s, null);
			}
		}
	}
}
