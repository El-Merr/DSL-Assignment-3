/*
 * generated by Xtext 2.27.0
 */
package nl.tue.dsldesign.robot.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.tue.dsldesign.robot.metamodel.Initial;
import nl.tue.dsldesign.robot.metamodel.MetamodelPackage;
import nl.tue.dsldesign.robot.metamodel.Model;
import nl.tue.dsldesign.robot.metamodel.Robot;
import nl.tue.dsldesign.robot.metamodel.Step;
import nl.tue.dsldesign.robot.services.RobotGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RobotSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RobotGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MetamodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MetamodelPackage.INITIAL:
				sequence_Initial(context, (Initial) semanticObject); 
				return; 
			case MetamodelPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MetamodelPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case MetamodelPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Initial returns Initial
	 *
	 * Constraint:
	 *     (xPos=EInt yPos=EInt)
	 * </pre>
	 */
	protected void sequence_Initial(ISerializationContext context, Initial semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.INITIAL__XPOS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.INITIAL__XPOS));
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.INITIAL__YPOS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.INITIAL__YPOS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialAccess().getXPosEIntParserRuleCall_2_0(), semanticObject.getXPos());
		feeder.accept(grammarAccess.getInitialAccess().getYPosEIntParserRuleCall_4_0(), semanticObject.getYPos());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     robots+=Robot*
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (initial=Initial? (steps+=Step steps+=Step*)?)
	 * </pre>
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (direction=Direction distance=EInt?)
	 * </pre>
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
